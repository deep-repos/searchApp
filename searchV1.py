#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Jun 07, 2020 06:12:22 PM IST  platform: Windows NT


import os
import tkFileDialog
import queue as Queue
import threading 
import sys



selectedFolderList1=[]
selectedButton=None
che64=None
def resetIndicator():
    global x1,x2,x3,x4
    x1=0
    x2=10
    x3=20
    x4=30


def browseFolder():

    root = tk.Tk()
    root.withdraw() #use to hide tkinter window
    tempdir = tkFileDialog.askdirectory(parent=root, initialdir='C:\\', title='Please select a folder')
    tempdir = tempdir.replace('/','\\')
    return(tempdir)




def addFolder():
    global top,selectedFolderList1
    folderSelected = browseFolder()
    if(len(folderSelected)==0):
        return
    if(folderSelected in  selectedFolderList1):
        return
    selectedFolderList1.append(folderSelected)
    top.selectedFolderList.insert(len(selectedFolderList1)-1,folderSelected)


def removeFolder():
    global top,selectedFolderList1
    if(len(selectedFolderList1)==0):
        return
    temp = top.selectedFolderList.curselection()
    if(len(temp)==0):
        return
    index=top.selectedFolderList.curselection()[0]
    selectedFolderList1.remove(selectedFolderList1[index])
    top.selectedFolderList.delete(0,top.selectedFolderList.size()-1)
    for  i in range(0,len(selectedFolderList1)):    
        top.selectedFolderList.insert(i,selectedFolderList1[i])


stopSearchFlag=0

def stopSearch():
    global stopSearchFlag,top
    if(top.Label6==None):
        return



    stopSearchFlag=1
    searchFinish()


searchFinishFlag=0
def searchFinish():
    global searchFinishFlag,searchFlag
    searchFinishFlag=1
    searchFlag=0

    #searchFinishFlag=0    

x1=0
x2=10
x3=20
x4=30
step1=700
def removeIndicator():
    global top
    if(top.Label6==None):
        return
    top.Label6.destroy()
    top.Label7.destroy()
    top.Label8.destroy()
    top.Label9.destroy()

 
def indicator():
    global x1,x2,x3,x4,top,root,searchFinishFlag
    if(searchFinishFlag==1):
        removeIndicator()
        searchFinishFlag=0
        stopSearchFlag=0
        resetIndicator()
        return

    root1=top
    if(root1.Label6!=None):
        root1.Label6.destroy()
    if(root1.Label7!=None):
        root1.Label7.destroy()
  
    if(root1.Label8!=None):
        root1.Label8.destroy()

        
    if(root1.Label9!=None):
        root1.Label9.destroy()


    root1.Label6 = tk.Button(root)
    root1.Label7 = tk.Button(root)
    root1.Label8 = tk.Button(root)
    root1.Label9 = tk.Button(root)

    root1.Label6.configure(activebackground="#f9f9f9")
    root1.Label6.configure(activeforeground="black")
    root1.Label6.configure(background="#000000")
    root1.Label6.configure(disabledforeground="#a3a3a3")
    root1.Label6.configure(foreground="#000000")
    root1.Label6.configure(highlightbackground="#d9d9d9")
    root1.Label6.configure(highlightcolor="black")
    root1.Label6.configure(text='''Label''')

    root1.Label7.configure(activebackground="#f9f9f9")
    root1.Label7.configure(activeforeground="black")
    root1.Label7.configure(background="#000000")
    root1.Label7.configure(disabledforeground="#a3a3a3")
    root1.Label7.configure(foreground="#000000")
    root1.Label7.configure(highlightbackground="#d9d9d9")
    root1.Label7.configure(highlightcolor="black")
    root1.Label7.configure(text='''Label''')


    root1.Label8.configure(activebackground="#f9f9f9")
    root1.Label8.configure(activeforeground="black")
    root1.Label8.configure(background="#000000")
    root1.Label8.configure(disabledforeground="#a3a3a3")
    root1.Label8.configure(foreground="#000000")
    root1.Label8.configure(highlightbackground="#d9d9d9")
    root1.Label8.configure(highlightcolor="black")
    root1.Label8.configure(text='''Label''')
    
    root1.Label9.configure(activebackground="#f9f9f9")
    root1.Label9.configure(activeforeground="black")
    root1.Label9.configure(background="#000000")
    root1.Label9.configure(disabledforeground="#a3a3a3")
    root1.Label9.configure(foreground="#000000")
    root1.Label9.configure(highlightbackground="#d9d9d9")
    root1.Label9.configure(highlightcolor="black")
    root1.Label9.configure(text='''Label''')


    root1.Label6.place(x=x1,y=125, height=11, width=11)
    root1.Label7.place(x=x2,y=125, height=11, width=11)
    root1.Label8.place(x=x3,y=125, height=11, width=11)
    root1.Label9.place(x=x4,y=125, height=11, width=11)


    if(x4<step1+30):
        x1=x1
        x2=x2
        x3=x3
        x4=x4+50
    
    if(x4==step1+30 and x3<step1+20):
        x1=x1
        x2=x2
        x3=x3+50
        x4=x4

    if(x4==step1+30 and x3==step1+20 and x2<step1+10):
        x1=x1
        x2=x2+50
        x3=x3
        x4=x4

    if(x4==step1+30 and x3==step1+20 and x2==step1+10):
        x1=x1+50
        x2=x2
        x3=x3
        x4=x4


    if(x4<2*step1+30 and x3==step1+20 and x2==step1+10 and x1==step1):
        x1=x1
        x2=x2
        x3=x3
        x4=x4+50    
    
    if(x4==2*step1+30 and x3<2*step1+20 and x2==step1+10 and x1==step1):
        x1=x1
        x2=x2
        x3=x3+50
        x4=x4
    
    if(x4==2*step1+30 and x3==2*step1+20 and x2<2*step1+10 and x1==step1):
        x1=x1
        x2=x2+50
        x3=x3
        x4=x4
    if(x4==2*step1+30 and x3==2*step1+20 and x2==2*step1+10 and x1<2*step1):
        x1=x1+50
        x2=x2
        x3=x3
        x4=x4

    if(x1==2*step1):
        x1=0
        x2=10
        x3=20
        x4=30

    root.after(100,indicator)




searchResultList1=[]
counter=0
queue = Queue.Queue()
def clean():
    global counter,searchResultList1,queue,top,current
    counter=0
    queue=Queue.Queue()
    top.searchResultList.delete(0,len(searchResultList1))     
    top.searchResultListPath.delete(0,len(searchResultList1))
    top.searchButton['state']='normal'
    searchResultList1=[]
    current=0



def process_queue():
        global queue,root,counter,top
        print(counter)
        
        try:
                msg = queue.get(0)
                #print(queue)
                #print(msg)
                tempMsg =msg

            #tk.Label(root,text=msg).place(x=10,y=10)
            #print(top.Listbox1)
                #msg.split('')
                print(type(msg))
                tempMsg =tempMsg.split('\\')
                fileOrFolderName = tempMsg[len(tempMsg)-1]
                '''
                if(len(fileOrFolderName)>30):
                    fileOrFolderName =  fileOrFolderName[0:30]+"..."+" "*7
                else:
                    fileOrFolderName = fileOrFolderName+" "*(40-len(fileOrFolderName))
                '''
                #print(msg)
                #fileOrFolderName=fileOrFolderName+" "*10
                msg =tempMsg[0]+'\\'+tempMsg[1]+'\\'+msg[len(tempMsg[0])+len(tempMsg[1])+2:]

                indexT = msg.rindex('\\\\')
                msg=msg[0:indexT+1]+msg[indexT+2:]                
                #msg = tempMsg[len(tempMsg)-1]+" ** "+msg

                top.searchResultList.insert(counter,fileOrFolderName)
                top.searchResultListPath.insert(counter,msg)
                counter=counter+1
    
        except Queue.Empty:
            pass
           #root.after(100, process_queue)
        
        #top.Entry1.set('Wait')

def dfs_folder(pathToFolder,folder,x):
    """
    if(recursionDepth==1000):
        return

    recursionDepth=recursionDepth+1
    """
    print(pathToFolder)
    global queue,searchResultList1,stopSearchFlag,counter
    if(counter<18):
        process_queue()

    #print("hello")
    if(stopSearchFlag==1):
        #removeIndicator()
        #resetIndicator()
        return
    p=pathToFolder
    print(p+'\\'+folder)
    if(searchController(x,folder)==True):
        searchResultList1.append(p+'\\'+folder)
        if(counter<19):
            queue.put(p+'\\'+folder)
    #list1.append(folder)

    try:
        l=os.listdir(p+'\\'+folder)
        for i in l:

            dfs_folder(p+'\\'+folder,i,x)
            if(stopSearchFlag==1):
                return

    except:
        pass

class ThreadedTask(threading.Thread):
    def __init__(self, queue,x):
        threading.Thread.__init__(self)
        self.queue = queue
        self.x=x

    def run(self):
        global top,stopSearchFlag,selectedFolderList1
        #time.sleep(5)  # Simulate long running process
        #self.queue.put("task finished")
        
        for  i in selectedFolderList1:
            if(stopSearchFlag==1):
                break
            
            temp =''+ i 
            print('TEMP')
            #print(temp)
            #dfs_folder('C:\\Users\\Deep\\Desktop\\python_search\\','gui_multithread',self.x)
            print(temp)
            if(i[i.rindex('\\')+1:]!=''):
                temp=i[0:i.rindex('\\')+1]
                dfs_folder(temp,i[i.rindex('\\')+1:] ,self.x)
            else:
                temp=i[0:i.rindex('\\')]
                dfs_folder(temp,'',self.x)


        #dfs_folder('C:\\Users\\Deep\\Desktop\\sem8Notes\\','',self.x)
        top.searchButton['state']='normal'
        stopSearchFlag=0
        searchFinish()

        print("\a")
  







choiceSearch=1
caseSensitive=True
def search():
    global top,selectedFolderList1,choiceSearch,caseSensitive
    choiceSearch = selectedButton.get()
    caseSensitive=che64.get()

    if(len(selectedFolderList1)==0):
        return
    clean()
    removeIndicator()
    resetIndicator()
    indicator()
    top.searchButton['state']='disabled'
    x=top.searchEntry.get()
    print(x)
    print(type(x))
    ThreadedTask(queue,x).start()
    


def openFileOrFolder():
    global top,searchResultList1,step2
    if(len(searchResultList1)==0):
        return

    index1=top.searchResultList.curselection()
    index2=top.searchResultListPath.curselection()
    print(top.searchResultListPath.get(0))

    if(len(index1)!=0):
        selectedPath =top.searchResultListPath.get(index1)


    elif(len(index2)!=0):
        selectedPath =top.searchResultListPath.get(index2)
    else:
        return

    #print(index1)
    #selectedPath =searchResultList1[index1[0]]
    print('hi')
    print(selectedPath)

    try:
        os.startfile(selectedPath)
    except:
        print('No application is associated with the specified file for this operation:')


current=0
step2=18
def nextSearchResult():
    global current,top,step2
    print('nextSearch')
    print((current+1)*step2>=len(searchResultList1))
    if((current+1)*step2>=len(searchResultList1)):
        return

    current=current+1
    #print( l[current*step1:current*step1+step1])
    j=0

    top.searchResultList.delete(0,top.searchResultList.size())
    top.searchResultListPath.delete(0,top.searchResultListPath.size())

    tempList=searchResultList1[current*step2:current*step2+step2]
    for i in tempList:
        msg=i
        tempMsg =msg.split('\\')
        fileOrFolderName = tempMsg[len(tempMsg)-1]
        '''

        if(len(fileOrFolderName)>30):
            fileOrFolderName =  fileOrFolderName[0:30]+"..."+" "*7
        else:
            fileOrFolderName = fileOrFolderName+" "*(40-len(fileOrFolderName))
            #print(msg)
            #fileOrFolderName=fileOrFolderName+" "*10
        '''
        msg =tempMsg[0]+'\\'+tempMsg[1]+'\\'+msg[len(tempMsg[0])+len(tempMsg[1])+2:]
        indexT = msg.rindex('\\\\')
        msg=msg[0:indexT+1]+msg[indexT+2:]    

        top.searchResultList.insert(j,fileOrFolderName)
        top.searchResultListPath.insert(j,msg)
        j=j+1


def previousSearchResult():
    global current,top,step2
    if(current-1<0):
        return
    current=current-1
    print(current)
    j=0

    top.searchResultList.delete(0,top.searchResultList.size())
    top.searchResultListPath.delete(0,top.searchResultListPath.size())

    tempList=searchResultList1[current*step2:current*step2+step2]
    for i in tempList:
        msg=i
        tempMsg =msg.split('\\')
        fileOrFolderName = tempMsg[len(tempMsg)-1]
        '''
        if(len(fileOrFolderName)>30):
            fileOrFolderName =  fileOrFolderName[0:30]+"..."+" "*7
        else:
            fileOrFolderName = fileOrFolderName+" "*(40-len(fileOrFolderName))
            #print(msg)
            #fileOrFolderName=fileOrFolderName+" "*10
        '''
        msg =tempMsg[0]+'\\'+tempMsg[1]+'\\'+msg[len(tempMsg[0])+len(tempMsg[1])+2:]
        indexT = msg.rindex('\\\\')
        msg=msg[0:indexT+1]+msg[indexT+2:]

        top.searchResultList.insert(j,fileOrFolderName)
        top.searchResultListPath.insert(j,msg)
        j=j+1
   


def on_closing():
    global root,stopSearchFlag,top
    stopSearch()
    print(stopSearchFlag)
    print(searchFinishFlag)

    if(stopSearchFlag==1 and searchFinishFlag==1):
        root.destroy()
        sys.exit()
    else:

        while(stopSearchFlag!=0):
            print("stopping")
    
        root.destroy()
        sys.exit()


def searchController(x,y):
    global choiceSearch,caseSensitive
    if(choiceSearch==3):
       return(strictSearchMatch(x,y,caseSensitive))



    if(choiceSearch==1):
        if(caseSensitive==False):
            x=x.lower()
            y=y.lower()
            print(x in y)
            if(x in y):
                return(True)
            else:
                return(False)
            
        else:
            if(x in y):
                return(True)
            else:
                return(False)

def strictSearchMatch(x,y,cf):
    if '.' in x:
        f1= x[0:x.rindex('.')]
        e1=x[x.rindex('.')+1:]

    else:
        f1=x
        e1=-1


    if '.' in y:
        f2= y[0:y.rindex('.')]
        e2=y[y.rindex('.')+1:]

    else:
        f2=y
        e2=-1


    if(e1!=-1):
        if(e2==-1):
            return(False)
        if(e1.lower()!=e2.lower()):
            return(False)


    
    if(cf==True):

        if(f1!=f2):
            return(False)
        else:
            return(True)
    else:
        f1=f1.lower()
        f2=f2.lower()
        if(f1!=f2):
            return(False)
        else:
            return(True)



import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def set_Tk_var():
    global selectedButton
    selectedButton = tk.IntVar()
    global che64
    che64 = tk.IntVar()


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root,top,selectedButton
    root = tk.Tk()
    set_Tk_var()
    selectedButton.set(1)
    che64.set(True)
    top = Toplevel1 (root)
    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1366x705+-6+19")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1, 1)
        top.title("File Hunting")
        top.configure(background="#ffffff")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.addFolder = tk.Button(top)
        self.addFolder.place(relx=0.0, rely=0.0, height=34, width=97)
        self.addFolder.configure(activebackground="#ffffff")
        self.addFolder.configure(activeforeground="#000000")
        self.addFolder.configure(background="#6262ff")
        self.addFolder.configure(borderwidth="0")
        self.addFolder.configure(disabledforeground="#a3a3a3")
        self.addFolder.configure(foreground="#ffffff")
        self.addFolder.configure(highlightbackground="#d9d9d9")
        self.addFolder.configure(highlightcolor="black")
        self.addFolder.configure(pady="0")
        self.addFolder.configure(text='''Add folder''')
        self.addFolder.configure(command=addFolder)
        
        self.removeFolder = tk.Button(top)
        self.removeFolder.place(relx=0.066, rely=0.0, height=34, width=107)
        self.removeFolder.configure(activebackground="#ffffff")
        self.removeFolder.configure(activeforeground="#000000")
        self.removeFolder.configure(background="#6262ff")
        self.removeFolder.configure(borderwidth="0")
        self.removeFolder.configure(disabledforeground="#a3a3a3")
        self.removeFolder.configure(foreground="#ffffff")
        self.removeFolder.configure(highlightbackground="#d9d9d9")
        self.removeFolder.configure(highlightcolor="black")
        self.removeFolder.configure(pady="0")
        self.removeFolder.configure(text='''Remove folder''')
        self.removeFolder.configure(command=removeFolder)

        self.selectedFolderList = tk.Listbox(top)
        self.selectedFolderList.place(relx=0.007, rely=0.27, relheight=0.684
                , relwidth=0.179)
        self.selectedFolderList.configure(background="white")
        self.selectedFolderList.configure(borderwidth="0")
        self.selectedFolderList.configure(disabledforeground="#a3a3a3")
        self.selectedFolderList.configure(font="-family {@Arial Unicode MS} -size 14")
        self.selectedFolderList.configure(foreground="#000000")
        self.selectedFolderList.configure(highlightbackground="#ffffff")
        self.selectedFolderList.configure(highlightcolor="#000000")
        self.selectedFolderList.configure(highlightthickness="0")
        self.selectedFolderList.configure(selectbackground="#c4c4c4")
        self.selectedFolderList.configure(selectforeground="black")

        self.searchEntry = tk.Entry(top)
        self.searchEntry.place(relx=0.22, rely=0.099,height=30, relwidth=0.559)
        self.searchEntry.configure(background="white")
        self.searchEntry.configure(disabledforeground="#a3a3a3")
        self.searchEntry.configure(font="-family {@Microsoft YaHei UI} -size 14")
        self.searchEntry.configure(foreground="#000000")
        self.searchEntry.configure(highlightbackground="#000000")
        self.searchEntry.configure(highlightcolor="black")
        self.searchEntry.configure(highlightthickness="1")
        self.searchEntry.configure(insertbackground="black")
        self.searchEntry.configure(selectbackground="#c4c4c4")
        self.searchEntry.configure(selectforeground="black")

        #self.scrollbar = tk.Scrollbar(top)
        
        #self.searchResultList = tk.Listbox(top,yscrollcommand = self.scrollbar.set)
        self.searchResultList = tk.Listbox(top)
        
        self.searchResultList.place(relx=0.22, rely=0.27, relheight=0.698
                , relwidth=0.679)

        self.searchResultList.configure(borderwidth="0")
        self.searchResultList.configure(disabledforeground="#a3a3a3")
        self.searchResultList.configure(font="-family {@Arial Unicode MS} -size 14")
        self.searchResultList.configure(foreground="#000000")
        self.searchResultList.configure(highlightbackground="#ffffff")
        self.searchResultList.configure(highlightcolor="#000000")
        self.searchResultList.configure(highlightthickness="0")
        self.searchResultList.configure(selectbackground="#c4c4c4")
        self.searchResultList.configure(selectforeground="black")




        self.searchResultList.configure(background="white")
        '''
        self.searchResultList.configure(borderwidth="0")
        self.searchResultList.configure(disabledforeground="#a3a3a3")
        self.searchResultList.configure(font="-family {@Arial Unicode MS} -size 14")
        self.searchResultList.configure(foreground="#000000")
        self.searchResultList.configure(highlightbackground="#ffffff")
        self.searchResultList.configure(highlightcolor="black")
        self.searchResultList.configure(selectbackground="#c4c4c4")
        self.searchResultList.configure(selectforeground="black")
        self.searchResultList.bind("<Button-1>",hi1)
        '''

        self.searchButton = tk.Button(top)
        self.searchButton.place(relx=0.791, rely=0.099, height=30, width=57)
        self.searchButton.configure(activebackground="#ffffff")
        self.searchButton.configure(activeforeground="#000000")
        self.searchButton.configure(background="#6262ff")
        self.searchButton.configure(borderwidth="0")
        self.searchButton.configure(disabledforeground="#a3a3a3")
        self.searchButton.configure(foreground="#ffffff")
        self.searchButton.configure(highlightbackground="#d9d9d9")
        self.searchButton.configure(highlightcolor="black")
        self.searchButton.configure(pady="0")
        self.searchButton.configure(text='''Search''')
        self.searchButton.configure(command=search)

        self.openFileFolder = tk.Button(top)
        self.openFileFolder.place(relx=0.212, rely=0.0, height=34, width=115)
        self.openFileFolder.configure(activebackground="#ffffff")
        self.openFileFolder.configure(activeforeground="#000000")
        self.openFileFolder.configure(background="#6262ff")
        self.openFileFolder.configure(borderwidth="0")
        self.openFileFolder.configure(disabledforeground="#a3a3a3")
        self.openFileFolder.configure(foreground="#ffffff")
        self.openFileFolder.configure(highlightbackground="#d9d9d9")
        self.openFileFolder.configure(highlightcolor="black")
        self.openFileFolder.configure(pady="0")
        self.openFileFolder.configure(text='''Open file/folder''')
        self.openFileFolder.configure(command = openFileOrFolder)

        self.stopSearchingButton = tk.Button(top)
        self.stopSearchingButton.place(relx=0.139, rely=0.0, height=34
                , width=107)
        self.stopSearchingButton.configure(activebackground="#ffffff")
        self.stopSearchingButton.configure(activeforeground="#000000")
        self.stopSearchingButton.configure(background="#6262ff")
        self.stopSearchingButton.configure(borderwidth="0")
        self.stopSearchingButton.configure(disabledforeground="#a3a3a3")
        self.stopSearchingButton.configure(foreground="#ffffff")
        self.stopSearchingButton.configure(highlightbackground="#d9d9d9")
        self.stopSearchingButton.configure(highlightcolor="black")
        self.stopSearchingButton.configure(pady="0")
        self.stopSearchingButton.configure(text='''Stop searching''')
        self.stopSearchingButton.configure(command=stopSearch)

        """
        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.22, rely=0.213, height=21, width=64)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Files/Folders''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.337, rely=0.213, height=21, width=64)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Location''')
        """

        self.Radiobutton1 = tk.Radiobutton(top)
        self.Radiobutton1.place(relx=0.432, rely=0.213, relheight=0.035
                , relwidth=0.048)
        self.Radiobutton1.configure(activebackground="#ffffff")
        self.Radiobutton1.configure(activeforeground="#000000")
        self.Radiobutton1.configure(background="#ffffff")
        self.Radiobutton1.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1.configure(foreground="#000000")
        self.Radiobutton1.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1.configure(highlightcolor="black")
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(text='''Default''')
        self.Radiobutton1.configure(variable=selectedButton)
        self.Radiobutton1.configure(value=1)
        """
        self.Radiobutton2 = tk.Radiobutton(top)
        self.Radiobutton2.place(relx=0.498, rely=0.213, relheight=0.035
                , relwidth=0.062)
        self.Radiobutton2.configure(activebackground="#ffffff")
        self.Radiobutton2.configure(activeforeground="#000000")
        self.Radiobutton2.configure(background="#ffffff")
        self.Radiobutton2.configure(disabledforeground="#a3a3a3")
        self.Radiobutton2.configure(foreground="#000000")
        self.Radiobutton2.configure(highlightbackground="#d9d9d9")
        self.Radiobutton2.configure(highlightcolor="black")
        self.Radiobutton2.configure(justify='left')
        self.Radiobutton2.configure(text='''Wild Cards''')
        self.Radiobutton2.configure(variable=selectedButton)
        self.Radiobutton2.configure(value=2)
        """

        self.Radiobutton3 = tk.Radiobutton(top)
        self.Radiobutton3.place(relx=0.556, rely=0.213, relheight=0.035
                , relwidth=0.08)
        self.Radiobutton3.configure(activebackground="#ffffff")
        self.Radiobutton3.configure(activeforeground="#000000")
        self.Radiobutton3.configure(background="#ffffff")
        self.Radiobutton3.configure(disabledforeground="#a3a3a3")
        self.Radiobutton3.configure(foreground="#000000")
        self.Radiobutton3.configure(highlightbackground="#d9d9d9")
        self.Radiobutton3.configure(highlightcolor="black")
        self.Radiobutton3.configure(justify='left')
        self.Radiobutton3.configure(text='''Strict Search''')
        self.Radiobutton3.configure(variable=selectedButton)
        self.Radiobutton3.configure(value=3)
        """
        self.Radiobutton4 = tk.Radiobutton(top)
        self.Radiobutton4.place(relx=0.63, rely=0.213, relheight=0.035
                , relwidth=0.08)
        self.Radiobutton4.configure(activebackground="#ffffff")
        self.Radiobutton4.configure(activeforeground="#000000")
        self.Radiobutton4.configure(background="#ffffff")
        self.Radiobutton4.configure(disabledforeground="#a3a3a3")
        self.Radiobutton4.configure(foreground="#000000")
        self.Radiobutton4.configure(highlightbackground="#d9d9d9")
        self.Radiobutton4.configure(highlightcolor="black")
        self.Radiobutton4.configure(justify='left')
        self.Radiobutton4.configure(text='''Content Search''')
        self.Radiobutton4.configure(variable=selectedButton)
        self.Radiobutton4.configure(value=4)
        """

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.0, rely=0.213, height=21, width=154)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Selected folders for Search''')

        self.Checkbutton1 = tk.Checkbutton(top)
        self.Checkbutton1.place(relx=0.717, rely=0.213, relheight=0.035
                , relwidth=0.075)
        self.Checkbutton1.configure(activebackground="#ffffff")
        self.Checkbutton1.configure(activeforeground="#000000")
        self.Checkbutton1.configure(background="#ffffff")
        self.Checkbutton1.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1.configure(highlightcolor="black")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(text='''Case Sensitive''')
        self.Checkbutton1.configure(variable=che64)

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.3, rely=-0.014, height=1, width=934)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Label''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.293, rely=0.0, height=34, width=950)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#6262ff")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label6=None
        self.Label7=None
        self.Label8=None
        self.Label9=None


        
        #self.scrollbar.pack(fill =tk.Y,side = tk.RIGHT )
        #self.scrollbar.config( command = self.yview )


        #self.searchResultListPath = tk.Listbox(top,yscrollcommand = self.scrollbar.set)
        self.searchResultListPath = tk.Listbox(top)

        self.searchResultListPath.place(relx=0.483, rely=0.27, relheight=0.698
                , relwidth=0.479)


        self.searchResultListPath.configure(borderwidth="0")
        self.searchResultListPath.configure(disabledforeground="#a3a3a3")
        self.searchResultListPath.configure(font="-family {@Arial Unicode MS} -size 14")
        self.searchResultListPath.configure(foreground="#000000")
        self.searchResultListPath.configure(highlightbackground="#ffffff")
        self.searchResultListPath.configure(highlightcolor="#000000")
        self.searchResultListPath.configure(highlightthickness="0")
        self.searchResultListPath.configure(selectbackground="#c4c4c4")
        self.searchResultListPath.configure(selectforeground="black")
        self.searchResultListPath.configure(background="white")


        '''

        self.searchResultListPath.configure(background="white")
        self.searchResultListPath.configure(disabledforeground="#a3a3a3")
        self.searchResultListPath.configure(font="TkFixedFont")
        self.searchResultListPath.configure(foreground="#000000")
        self.searchResultListPath.configure(background="white")
        self.searchResultListPath.configure(borderwidth="0")
        self.searchResultListPath.configure(disabledforeground="#a3a3a3")
        self.searchResultListPath.configure(font="-family {@Arial Unicode MS} -size 14")
        self.searchResultListPath.configure(foreground="#000000")
        self.searchResultListPath.configure(highlightbackground="#ffffff")
        self.searchResultListPath.configure(highlightcolor="black")
        self.searchResultListPath.configure(selectbackground="#c4c4c4")
        self.searchResultListPath.configure(selectforeground="black")
        '''

        self.previousButton = tk.Button(top)
        self.previousButton.place(relx=0.827, rely=0.213, height=24, width=56)

        self.previousButton.configure(activebackground="#ffffff")
        self.previousButton.configure(activeforeground="#000000")
        self.previousButton.configure(background="#6262ff")
        self.previousButton.configure(borderwidth="0")
        self.previousButton.configure(disabledforeground="#a3a3a3")
        self.previousButton.configure(foreground="#ffffff")
        self.previousButton.configure(highlightbackground="#d9d9d9")
        self.previousButton.configure(highlightcolor="black")
        self.previousButton.configure(pady="0")
        self.previousButton.configure(text='''Previous''')
        self.previousButton.configure(command=previousSearchResult)


        self.nextButton = tk.Button(top)
        self.nextButton.place(relx=0.915, rely=0.213, height=24, width=46)
        self.nextButton.configure(activebackground="#ffffff")
        self.nextButton.configure(activeforeground="#000000")
        self.nextButton.configure(background="#6262ff")
        self.nextButton.configure(borderwidth="0")
        self.nextButton.configure(disabledforeground="#a3a3a3")
        self.nextButton.configure(foreground="#ffffff")
        self.nextButton.configure(highlightbackground="#d9d9d9")
        self.nextButton.configure(highlightcolor="black")
        self.nextButton.configure(pady="0")
        self.nextButton.configure(text='''Next''')
        self.nextButton.configure(command=nextSearchResult)



    def yview(self, *args):
        apply(self.searchResultList.yview, args)
        apply(self.searchResultListPath.yview, args)
















        """

        self.Label6 = tk.Label(top)
        self.Label6.place(x=0,y=50,height=11, width=34)

        #self.Label6.place(relx=0.007, rely=0.057, height=11, width=34)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(background="#000000")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''Label''')

        self.Label7 = tk.Label(top)
        self.Label7.place(x=50,y=50,height=11, width=34)

        #self.Label7.place(relx=0.044, rely=0.057, height=11, width=34)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(background="#000000")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="black")
        self.Label7.configure(text='''Label''')

        self.Label8 = tk.Label(top)
        self.Label8.place(x=100,y=50,height=11, width=34)

        #self.Label8.place(relx=0.081, rely=0.057, height=11, width=34)
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(activeforeground="black")
        self.Label8.configure(background="#000000")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(highlightbackground="#d9d9d9")
        self.Label8.configure(highlightcolor="black")
        self.Label8.configure(text='''Label''')

        self.Label9 = tk.Label(top)
        self.Label9.place(x=150,y=50,height=11, width=34)
        #self.Label9.place(relx=0.117, rely=0.057, height=11, width=34)
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(activeforeground="black")
        self.Label9.configure(background="#000000")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(highlightbackground="#d9d9d9")
        self.Label9.configure(highlightcolor="black")
        self.Label9.configure(text='''Label''')
        """

    

if __name__ == '__main__':
    vp_start_gui()





